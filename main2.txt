#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define UNO 1
#define DOS 2
#define TRES 3
#define CUATRO 4
#define EXITO 0
#define ERROR -1
#define NCHARS 256
#define ES_D 0
#define ES_S 1
#define ES_DS 2

typedef enum boolean { FALSE, TRUE } boolean;

// ASCII
static int ascii[NCHARS] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,	0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,	0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,	0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,	0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,	0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};

int dString1(char*);
int sString1(char*);
int sString1String2(char*, char*);
int dsString1String2(char*, char*);
int string1String2(char *, char *);
int opcionArgcDos(char*);
int opcionArgcTres(char*, char*);
int opcionArgcCuatro(char*, char*, char*);
void obtenerOpcion(char*, int*, boolean*);
void inicializarArrayBoolean(boolean*);
void mostrarH();
int errorPorEscritura();

int main(int argc, char **argv) {
	int retorno = 0;
	switch (argc) {
		case DOS:	retorno = opcionArgcDos(argv[1]);
					break;
		case TRES:	retorno = opcionArgcTres(argv[1], argv[2]);
					break;
		case CUATRO:retorno = opcionArgcCuatro(argv[1], argv[2], argv[3]);
					break;
		default: 	mostrarH();
					break;
	}
	return retorno;
}

// LLama a la funcion correspondiente dependiendo de los argumentos
// Opciones validas:
// ./tp0 -V
// ./tp0 -h

int opcionArgcDos(char *option) {
	char opcion1[] = "-V";
	char opcion2[] = "-h";

	if ( strcmp(opcion1, option)  == 0 ) {
		printf ("tp0 Version 19/04/2011\n");
		return EXITO;
	}

	if ( strcmp(opcion2, option)  == 0 ) {
		mostrarH();
		return EXITO;
	}

	perror("ERROR: Los argumentos validos son -V o -h\n");
	return ERROR;
}

// LLama a la funcion correspondiente dependiendo de los argumentos
// Opciones validas:
// ./tp0 -d string1
// ./tp0 -s string1
// ./tp0 string1 string2

int opcionArgcTres(char *string1, char *string2) {
	boolean esOpcion = FALSE;
	int numFuncion = 0;

	int (*pFuncion[DOS])(char*) = {dString1, sString1};

	obtenerOpcion(string1, &numFuncion, &esOpcion);

	if (esOpcion) {
		if (numFuncion != ES_DS){
			return (*pFuncion[numFuncion])(string2);
		}

		perror("ERROR: La opcion -ds debe recibir 2 cadenas");
		return ERROR;

	}
	// si la primera cadena no es un opcion -s, -d, -ds.
	// Se toma como otra cadena y por defecto la opcion es sustituir string1String2
	return string1String2(string1, string2);
}

// LLama a la funcion Correspondiente dependiendo de los argumentos
// Opciones validas:
// ./tp0 -s string1 string2
// ./tp0 -ds string1 string2

int opcionArgcCuatro(char *option, char *string1, char *string2) {
	boolean esOpcion = FALSE;
	int numFuncion = 0;

	int (*pFuncion[DOS])(char*, char*) = {sString1String2, dsString1String2 };

	obtenerOpcion(option, &numFuncion, &esOpcion);

	if ( esOpcion ) {
		if (numFuncion != ES_D){
			return (*pFuncion[numFuncion-1])(string1, string2);
		}
		perror("ERROR: La opcion -d debe recibir 1 cadena");
		return ERROR;
	}
	perror("ERROR: Sintaxis invalida");
	return ERROR;
}

// Verififica cual de las opciones se ingreso (-d,-s,-ds);

void obtenerOpcion(char *option, int *numFuncion, boolean *esOpcion) {
	char opcion1[] = "-d";
	char opcion2[] = "-s";
	char opcion3[] = "-ds";

	if (strcmp(opcion1, option)  == 0 ) {
		*esOpcion = TRUE;
		*numFuncion = ES_D;
	}
	else if (strcmp(opcion2, option)  == 0 ) {
		*esOpcion = TRUE;
		*numFuncion = ES_S;
	}
	else if (strcmp(opcion3, option)  == 0 ) {
		*esOpcion = TRUE;
		*numFuncion = ES_DS;
	}
}

// Cuando el usuario hace una llamada del tipo ./tr -d string1
// Elimina los caracteres de stdin segun string1 y muestra el resultado por stdout

int dString1(char *string1) {
	int ch, i = 0;
	int size = strlen(string1);
	boolean debeBorrarse[NCHARS];
	inicializarArrayBoolean(debeBorrarse);

	for (i = 0; (i < size); i++){
		debeBorrarse[((int)string1[i])] = TRUE;
	}

	while ((ch = getchar()) != EOF) {
		if (!debeBorrarse[ch])
			if(putchar(ascii[ch]) == EOF)
				return errorPorEscritura();
	}
	return EXITO;
}

// Cuando el usuario hace una llamada del tipo ./tr -s string1
// Se hace la sumarizacion, se usa un array de boolean para saber si
// el caracter ya fue leido.
int sString1(char *string1) {
	int ch, i;
	boolean fueLeido[NCHARS], salir;
	inicializarArrayBoolean(fueLeido);

	int size = strlen(string1);

	while ((ch = getchar()) != EOF) {
		salir = FALSE;
		for (i = 0; ((i < size) && (!salir)); i++) {
			if (ch == string1[i]) {
				if(!fueLeido[ch]){
					fueLeido[ch] = TRUE;
					if(putchar(ascii[ch])==EOF)return errorPorEscritura();
				} else
					salir = TRUE;
			}
		}
		if (!fueLeido[ch])
			if(putchar(ascii[ch]) == EOF)
				return errorPorEscritura();
	}
	return EXITO;
}

// Cuando el usuario hace una llamada del tipo ./tr string1 string2
// Sustituye los caracteres de string1 por los de string2
// Si la longitud de string2 es menor a la de string1 se reemplaza por el
// ultimo caracter de string2 en el caso en que ya se supere el tamaÃ±o
int string1String2(char *string1, char *string2){
	int ch, i, final;
	char cambios[NCHARS];
	bzero(cambios,NCHARS);

	int string1Size = strlen(string1);
	int string2Size = strlen(string2);

	if (string1Size <= string2Size) final = string1Size;
		else final = string2Size;

	for (i=0; i < final; i++){
		cambios[((int)string1[i])] = string2[i];
	}

	if (final == string2Size){ //extiendo con el ultimo caracter de string 2
		for (i = string2Size; i < string1Size; i++)
			cambios[((int)string1[i])] = string2[string2Size-1];
	}

	while ((ch = getchar()) != EOF) {
		if (cambios[ch] == ascii[0]){
			if (putchar(ascii[ch]) == EOF)
				return errorPorEscritura();
		}else{
			if (putchar(cambios[ch]) == EOF) return errorPorEscritura();
		}
	}
	return EXITO;
}

// Cuando el usuaro hace una llamada del tipo ./tr -s string1 string2
int sString1String2(char *string1, char *string2) {
	int ch, i;
	boolean fueLeido[NCHARS], salir;

	inicializarArrayBoolean(fueLeido);

	int string1Size = strlen(string1);
	int string2Size = strlen(string2);

	while ((ch = getchar()) != EOF) {
		salir = FALSE;
		for ( i = 0; ((i < string1Size) && (!salir)); i++) {
			if ((ch == string1[i]) && (!fueLeido[ch])) {
				if (string2Size < (i + 1)){
					if(putchar(string2[string2Size]) == EOF)return errorPorEscritura();
				}else{
					if(putchar(string2[i]) == EOF)return errorPorEscritura();
				}
				salir = TRUE;
				fueLeido[ch] = TRUE;
			}
		}
		if (!fueLeido[ch])
			if (putchar(ascii[ch]) == EOF )return errorPorEscritura();
	}
	return EXITO;
}

// Cuando el usuaro haga una llamada del tipo ./tr -ds cadena1 cadena2
int dsString1String2(char *string1, char *string2) {
	int ch, i;
	boolean fueLeido[NCHARS], debeBorrarse[NCHARS], salir;

	inicializarArrayBoolean(fueLeido);
	inicializarArrayBoolean(debeBorrarse);

	int string1Size = strlen(string1);
	int string2Size = strlen(string2);

	for (i = 0; i < string1Size; i++){
		debeBorrarse[((int)string1[i])] = TRUE;
	}

	while ((ch = getchar()) != EOF) {
		if (!debeBorrarse[ch]) {
			salir = FALSE;
			for ( i = 0; ((i < string2Size) && (!salir)); i++) {
				if (ch == string2[i]) {
					if(!fueLeido[ch]){
						fueLeido[ch] = TRUE;
						if(putchar(ascii[ch])==EOF)return errorPorEscritura();
					}
					salir = TRUE;
				}
			}
			if (!fueLeido[ch])
				if(putchar(ascii[ch]) == EOF)return errorPorEscritura();
		}
	}
	return EXITO;
}

void inicializarArrayBoolean(boolean *fueLeido){
	int i;
	for(i = 0; i < 256; i++){
		fueLeido[i] = FALSE;
	}
}

void mostrarH() {
	printf ("Usage:\n");
	printf ("tp0 -h\n");
	printf ("tp0 -V\n");
	printf ("tp0 [options] string1 string2\n");
	printf ("tp0 [options] string1\n");
	printf ("Options:\n");
	printf ("-V, --version\n");
	printf ("-h, --help\n");
	printf ("-d, --delete\n");
	printf ("-s, --squeeze\n");
}

int errorPorEscritura() {
	perror("ERROR: ocurre un error de escritura");
	return ERROR;
}
